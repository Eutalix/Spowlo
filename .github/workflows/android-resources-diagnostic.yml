name: Android Resources Diagnostic

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  resources-diagnostic:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Set up Android SDK (provides 'sdkmanager' on PATH)
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Install platform (android-35) and build-tools (35.0.0) so AAPT2 links android.jar with lStar
      - name: Install Android platform and build-tools
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      # Provide CLIENT_ID / CLIENT_SECRET for modules that read local.properties
      - name: Configure Build Properties
        run: |
          echo "CLIENT_ID=${{ secrets.CLIENT_ID || 'PLACEHOLDER' }}" >> local.properties
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET || 'PLACEHOLDER' }}" >> local.properties

      # Quick environment introspection
      - name: Print Android SDK info
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          sdkmanager --list | head -n 100
          ls -la "${ANDROID_SDK_ROOT}/platforms/android-35" || true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Print compileSdk seen by Gradle
      - name: Print Gradle project properties (compileSdk)
        run: ./gradlew :app:properties | grep -i "compileSdk" || true

      # Pre-scan for raw '{str}' placeholders in app resources (should be none)
      - name: Grep '{str}' in app resources
        run: |
          echo "Scanning app/src/main/res for >{str}< ..."
          if grep -R --line-number '>{str}<' app/src/main/res; then
            echo "Found raw {str} placeholders in app resources (needs fix)."
          else
            echo "No raw {str} found in app resources."
          fi

      # Scan Gradle transformed values for '{str}' (library-provided)
      - name: Grep '{str}' in Gradle transformed values
        run: |
          echo "Scanning Gradle caches for library values containing {str} (optional)..."
          grep -R --line-number "{str}" ~/.gradle/caches 2>/dev/null | head -n 200 || true

      # Merge resources in release with --debug and --stacktrace to capture full AAPT2 paths
      - name: Merge resources (release) with --debug and --stacktrace
        run: ./gradlew :app:mergeReleaseResources --debug --stacktrace

      # Upload the merged values so we can inspect exactly what AAPT2 compiled
      - name: Upload merged values (release)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-values-${{ github.sha }}
          path: |
            app/build/intermediates/incremental/release/mergeReleaseResources/merged.dir/values/values.xml
            app/build/intermediates/incremental/release/mergeReleaseResources/merged.dir/values-*/values.xml
          if-no-files-found: ignore
          retention-days: 7

      # Upload Gradle daemon and build logs to help spot the exact file/line
      - name: Upload Gradle daemon/build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs-${{ github.sha }}
          path: |
            ~/.gradle/daemon/*/daemon-*.out.log
            **/build/outputs/logs/**
          if-no-files-found: ignore
          retention-days: 7